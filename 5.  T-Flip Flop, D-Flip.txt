5.  T-Flip Flop, D-Flip
Flop and SR-Flip  and jk flip flop

) T-Flip Flop:- 
module tff(input clk,input rstn,input t,output reg q);
always @(posedge clk) begin
if(!rstn)
q <= 0;
else if(t)
q <= ~q;
end
endmodule
2) D-Flip Flop:- 
module dff(input d,input clk,input rstn,output reg q);
always @(posedge clk)
if(!rstn)
q <= 0;
else
q <= d;
endmodule

3) SR Flip Flop :-
 module srFlipFlop(input s,input r,input clk,input
rstn,output reg q,output qbar);
always @(posedge clk)// Synchronous reset
begin
if(!rstn)
q <= 0;
else
begin
case({s,r})
2'b00 : q <= q; // No change
2'b01 : q <= 1'b0; // Reset
2'b10 : q <= 1'b1; // Set
2'b11 : q <= 1'bx; // Invalid
endcase
end
end
assign qbar = ~q;
endmodule

4) JK Flip Flop :-
 module jkflipFlop(input j,input k,input clk,output reg q);
always @(posedge clk)
begin
case({j,k})
2'b00 : q <= q; // No change
2'b01 : q <= 0; // Reset
2'b10 : q <= 1; // Set
2'b11 : q <= ~q; // Complement
endcase
end
endmodule


 TESTBENCH:- 1) T- Flip Flop:- 

module tb;
reg clk;
reg rstn;
reg t;
// reg q;
reg [4:0] dly; // Declaration of delay block
tff u0(.clk(clk),.rstn(rstn),.t(t),.q(q));
always #5 clk = ~clk;
initial begin
// $dumpfile("dump.vcd"); $dumpvars;
{rstn,clk,t} <= 0;
$monitor ("T=%0t rstn=%0b t=%0d q=%0d"
, $time,
rstn, t, q);
repeat(2) @(posedge clk);
rstn <= 1;
for(integer i = 0 ; i < 20 ; i = i + 1) begin
dly = $random;
#dly t <= $random;
end
#20 $finish;
end
endmodule
2) D-Flip Flop :-
module tb;
reg clk;
reg d;
reg rstn;
reg[2:0] delay;
dff u0(.d(d),.rstn(rstn),.clk(clk),.q(q));
always #5 clk = ~clk;
initial begin
// $dumpfile("dump.vcd"); $dumpvars;
{clk, rstn, d} <= 0;
#15 d <= 1;
#10 rstn <= 1;
for(integer i = 0 ; i < 5 ; i = i + 1) begin
delay = $random;
#delay d <= i;
end
#10 $finish;
end
endmodule
3) SR Flip Flop :- 

module tb();
reg s;
reg r;
reg clk;
reg rstn;
wire q,qbar;
srFlipFlop
dff(.s(s), .r(r), .clk(clk), .rstn(rstn), .q(q), .qbar(qbar));
always #5 clk = ~clk;
initial begin
{clk, rstn} <= 0;
#5 rstn = 1;
drive(2'b00);
drive(2'b01);
drive(2'b10);
drive(2'b11);
#5;
$finish;
end
task drive(input [1:0] ip);
begin
@(posedge clk);
{s,r} = ip;
end
endtask
endmodule
4) JK Flip-Flop:- 

module tb;
reg j,k,clk;
always #5 clk = ~clk;
jkflipFlop u0(.j(j),.k(k),.clk(clk),.q(q));
initial
begin
$dumpfile("dump.vcd"); $dumpvars;
{j,k,clk} <= 0;
#5 j <= 0; k <= 1;
#10 j <= 1; k <= 0;
#15 j <= 1; k <= 1;
#20 $finish;
end
endmodule
